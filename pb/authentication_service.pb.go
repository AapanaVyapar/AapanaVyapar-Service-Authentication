// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: authentication_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_authentication_service_proto protoreflect.FileDescriptor

var file_authentication_service_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14,
	0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x73, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x14, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x95, 0x04, 0x0a, 0x0e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x06, 0x53, 0x69, 0x67, 0x6e,
	0x75, 0x70, 0x12, 0x0e, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0e, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x57, 0x69, 0x74,
	0x68, 0x4d, 0x61, 0x69, 0x6c, 0x12, 0x19, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x46, 0x6f,
	0x72, 0x4d, 0x61, 0x69, 0x6c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1a, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x4d, 0x61, 0x69, 0x6c,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c,
	0x0a, 0x0f, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x12, 0x1a, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e,
	0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0b,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x54, 0x50, 0x12, 0x1f, 0x2e, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x54, 0x50, 0x46, 0x6f, 0x72, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x54, 0x50, 0x46, 0x6f, 0x72, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x34, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x10, 0x2e, 0x6e, 0x65, 0x77, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x11, 0x2e, 0x6e, 0x65, 0x77, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x09, 0x52, 0x65,
	0x73, 0x65, 0x6e, 0x64, 0x4f, 0x54, 0x50, 0x12, 0x11, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64,
	0x4f, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x52, 0x65, 0x73,
	0x65, 0x6e, 0x64, 0x4f, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x2b, 0x0a, 0x06, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x12, 0x0e, 0x2e, 0x4c, 0x6f, 0x67,
	0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x4c, 0x6f, 0x67,
	0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x06, 0x5a,
	0x04, 0x2e, 0x3b, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_authentication_service_proto_goTypes = []interface{}{
	(*SignUpRequest)(nil),                   // 0: SignUpRequest
	(*SignInForMailBaseRequest)(nil),        // 1: SignInForMailBaseRequest
	(*SignInForPhoneBaseRequest)(nil),       // 2: SignInForPhoneBaseRequest
	(*ValidateOTPForPhoneBaseRequest)(nil),  // 3: ValidateOTPForPhoneBaseRequest
	(*NewTokenRequest)(nil),                 // 4: newTokenRequest
	(*ContactConformationRequest)(nil),      // 5: ContactConformationRequest
	(*ResendOTPRequest)(nil),                // 6: ResendOTPRequest
	(*LogoutRequest)(nil),                   // 7: LogoutRequest
	(*SignUpResponse)(nil),                  // 8: SignUpResponse
	(*SignInForMailBaseResponse)(nil),       // 9: SignInForMailBaseResponse
	(*SignInForPhoneBaseResponse)(nil),      // 10: SignInForPhoneBaseResponse
	(*ValidateOTPForPhoneBaseResponse)(nil), // 11: ValidateOTPForPhoneBaseResponse
	(*NewTokenResponse)(nil),                // 12: newTokenResponse
	(*ContactConformationResponse)(nil),     // 13: ContactConformationResponse
	(*ResendOTPResponse)(nil),               // 14: ResendOTPResponse
	(*LogoutResponse)(nil),                  // 15: LogoutResponse
}
var file_authentication_service_proto_depIdxs = []int32{
	0,  // 0: Authentication.Signup:input_type -> SignUpRequest
	1,  // 1: Authentication.SignInWithMail:input_type -> SignInForMailBaseRequest
	2,  // 2: Authentication.SignInWithPhone:input_type -> SignInForPhoneBaseRequest
	3,  // 3: Authentication.ValidateOTP:input_type -> ValidateOTPForPhoneBaseRequest
	4,  // 4: Authentication.GetNewToken:input_type -> newTokenRequest
	5,  // 5: Authentication.ContactConformation:input_type -> ContactConformationRequest
	6,  // 6: Authentication.ResendOTP:input_type -> ResendOTPRequest
	7,  // 7: Authentication.Logout:input_type -> LogoutRequest
	8,  // 8: Authentication.Signup:output_type -> SignUpResponse
	9,  // 9: Authentication.SignInWithMail:output_type -> SignInForMailBaseResponse
	10, // 10: Authentication.SignInWithPhone:output_type -> SignInForPhoneBaseResponse
	11, // 11: Authentication.ValidateOTP:output_type -> ValidateOTPForPhoneBaseResponse
	12, // 12: Authentication.GetNewToken:output_type -> newTokenResponse
	13, // 13: Authentication.ContactConformation:output_type -> ContactConformationResponse
	14, // 14: Authentication.ResendOTP:output_type -> ResendOTPResponse
	15, // 15: Authentication.Logout:output_type -> LogoutResponse
	8,  // [8:16] is the sub-list for method output_type
	0,  // [0:8] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_authentication_service_proto_init() }
func file_authentication_service_proto_init() {
	if File_authentication_service_proto != nil {
		return
	}
	file_signin_message_proto_init()
	file_signup_message_proto_init()
	file_token_message_proto_init()
	file_logout_message_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_authentication_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_authentication_service_proto_goTypes,
		DependencyIndexes: file_authentication_service_proto_depIdxs,
	}.Build()
	File_authentication_service_proto = out.File
	file_authentication_service_proto_rawDesc = nil
	file_authentication_service_proto_goTypes = nil
	file_authentication_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AuthenticationClient is the client API for Authentication service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuthenticationClient interface {
	Signup(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*SignUpResponse, error)
	SignInWithMail(ctx context.Context, in *SignInForMailBaseRequest, opts ...grpc.CallOption) (*SignInForMailBaseResponse, error)
	SignInWithPhone(ctx context.Context, in *SignInForPhoneBaseRequest, opts ...grpc.CallOption) (*SignInForPhoneBaseResponse, error)
	ValidateOTP(ctx context.Context, in *ValidateOTPForPhoneBaseRequest, opts ...grpc.CallOption) (*ValidateOTPForPhoneBaseResponse, error)
	GetNewToken(ctx context.Context, in *NewTokenRequest, opts ...grpc.CallOption) (*NewTokenResponse, error)
	ContactConformation(ctx context.Context, in *ContactConformationRequest, opts ...grpc.CallOption) (*ContactConformationResponse, error)
	ResendOTP(ctx context.Context, in *ResendOTPRequest, opts ...grpc.CallOption) (*ResendOTPResponse, error)
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error)
}

type authenticationClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthenticationClient(cc grpc.ClientConnInterface) AuthenticationClient {
	return &authenticationClient{cc}
}

func (c *authenticationClient) Signup(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*SignUpResponse, error) {
	out := new(SignUpResponse)
	err := c.cc.Invoke(ctx, "/Authentication/Signup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) SignInWithMail(ctx context.Context, in *SignInForMailBaseRequest, opts ...grpc.CallOption) (*SignInForMailBaseResponse, error) {
	out := new(SignInForMailBaseResponse)
	err := c.cc.Invoke(ctx, "/Authentication/SignInWithMail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) SignInWithPhone(ctx context.Context, in *SignInForPhoneBaseRequest, opts ...grpc.CallOption) (*SignInForPhoneBaseResponse, error) {
	out := new(SignInForPhoneBaseResponse)
	err := c.cc.Invoke(ctx, "/Authentication/SignInWithPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) ValidateOTP(ctx context.Context, in *ValidateOTPForPhoneBaseRequest, opts ...grpc.CallOption) (*ValidateOTPForPhoneBaseResponse, error) {
	out := new(ValidateOTPForPhoneBaseResponse)
	err := c.cc.Invoke(ctx, "/Authentication/ValidateOTP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) GetNewToken(ctx context.Context, in *NewTokenRequest, opts ...grpc.CallOption) (*NewTokenResponse, error) {
	out := new(NewTokenResponse)
	err := c.cc.Invoke(ctx, "/Authentication/GetNewToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) ContactConformation(ctx context.Context, in *ContactConformationRequest, opts ...grpc.CallOption) (*ContactConformationResponse, error) {
	out := new(ContactConformationResponse)
	err := c.cc.Invoke(ctx, "/Authentication/ContactConformation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) ResendOTP(ctx context.Context, in *ResendOTPRequest, opts ...grpc.CallOption) (*ResendOTPResponse, error) {
	out := new(ResendOTPResponse)
	err := c.cc.Invoke(ctx, "/Authentication/ResendOTP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error) {
	out := new(LogoutResponse)
	err := c.cc.Invoke(ctx, "/Authentication/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthenticationServer is the server API for Authentication service.
type AuthenticationServer interface {
	Signup(context.Context, *SignUpRequest) (*SignUpResponse, error)
	SignInWithMail(context.Context, *SignInForMailBaseRequest) (*SignInForMailBaseResponse, error)
	SignInWithPhone(context.Context, *SignInForPhoneBaseRequest) (*SignInForPhoneBaseResponse, error)
	ValidateOTP(context.Context, *ValidateOTPForPhoneBaseRequest) (*ValidateOTPForPhoneBaseResponse, error)
	GetNewToken(context.Context, *NewTokenRequest) (*NewTokenResponse, error)
	ContactConformation(context.Context, *ContactConformationRequest) (*ContactConformationResponse, error)
	ResendOTP(context.Context, *ResendOTPRequest) (*ResendOTPResponse, error)
	Logout(context.Context, *LogoutRequest) (*LogoutResponse, error)
}

// UnimplementedAuthenticationServer can be embedded to have forward compatible implementations.
type UnimplementedAuthenticationServer struct {
}

func (*UnimplementedAuthenticationServer) Signup(context.Context, *SignUpRequest) (*SignUpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Signup not implemented")
}
func (*UnimplementedAuthenticationServer) SignInWithMail(context.Context, *SignInForMailBaseRequest) (*SignInForMailBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignInWithMail not implemented")
}
func (*UnimplementedAuthenticationServer) SignInWithPhone(context.Context, *SignInForPhoneBaseRequest) (*SignInForPhoneBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignInWithPhone not implemented")
}
func (*UnimplementedAuthenticationServer) ValidateOTP(context.Context, *ValidateOTPForPhoneBaseRequest) (*ValidateOTPForPhoneBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateOTP not implemented")
}
func (*UnimplementedAuthenticationServer) GetNewToken(context.Context, *NewTokenRequest) (*NewTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewToken not implemented")
}
func (*UnimplementedAuthenticationServer) ContactConformation(context.Context, *ContactConformationRequest) (*ContactConformationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactConformation not implemented")
}
func (*UnimplementedAuthenticationServer) ResendOTP(context.Context, *ResendOTPRequest) (*ResendOTPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResendOTP not implemented")
}
func (*UnimplementedAuthenticationServer) Logout(context.Context, *LogoutRequest) (*LogoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}

func RegisterAuthenticationServer(s *grpc.Server, srv AuthenticationServer) {
	s.RegisterService(&_Authentication_serviceDesc, srv)
}

func _Authentication_Signup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).Signup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Authentication/Signup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).Signup(ctx, req.(*SignUpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_SignInWithMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInForMailBaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).SignInWithMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Authentication/SignInWithMail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).SignInWithMail(ctx, req.(*SignInForMailBaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_SignInWithPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInForPhoneBaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).SignInWithPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Authentication/SignInWithPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).SignInWithPhone(ctx, req.(*SignInForPhoneBaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_ValidateOTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateOTPForPhoneBaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).ValidateOTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Authentication/ValidateOTP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).ValidateOTP(ctx, req.(*ValidateOTPForPhoneBaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_GetNewToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).GetNewToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Authentication/GetNewToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).GetNewToken(ctx, req.(*NewTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_ContactConformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactConformationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).ContactConformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Authentication/ContactConformation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).ContactConformation(ctx, req.(*ContactConformationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_ResendOTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResendOTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).ResendOTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Authentication/ResendOTP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).ResendOTP(ctx, req.(*ResendOTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Authentication/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).Logout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Authentication_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Authentication",
	HandlerType: (*AuthenticationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Signup",
			Handler:    _Authentication_Signup_Handler,
		},
		{
			MethodName: "SignInWithMail",
			Handler:    _Authentication_SignInWithMail_Handler,
		},
		{
			MethodName: "SignInWithPhone",
			Handler:    _Authentication_SignInWithPhone_Handler,
		},
		{
			MethodName: "ValidateOTP",
			Handler:    _Authentication_ValidateOTP_Handler,
		},
		{
			MethodName: "GetNewToken",
			Handler:    _Authentication_GetNewToken_Handler,
		},
		{
			MethodName: "ContactConformation",
			Handler:    _Authentication_ContactConformation_Handler,
		},
		{
			MethodName: "ResendOTP",
			Handler:    _Authentication_ResendOTP_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _Authentication_Logout_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authentication_service.proto",
}
